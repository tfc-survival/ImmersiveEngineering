apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
    }
}

import groovy.json.JsonOutput

def mainVersion = "0.12"
def buildNumber = "110"

buildscript {
    repositories {
        jcenter()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url = 'https://repo.spongepowered.org/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.48'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'

version = "${mainVersion}-${buildNumber}" + getBuildNumber()
group = "blusunrize"
def archiveGroup = group
archivesBaseName = "ImmersiveEngineering"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
    mappings channel: 'stable', version: '39-1.12'

    accessTransformer = files(
            'src/main/resources/META-INF/ImmersiveEngineering_at.cfg',
            "deps_at/jei_at.cfg",
            "deps_at/mantle_at.cfg",
            "deps_at/oc_at.cfg",
            "deps_at/tfc_at.cfg"
    )

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'blusunrize.immersiveengineering.common.asm.IELoadingPlugin'

            property '--usename', 'hohserg'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    /*
    maven { // JEI & Tinkers
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // OpenComputers
        name "OpenComputers"
        url "https://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // CraftTweaker (aka MineTweaker3)
        name 'jared maven'
        url "https://maven.blamejared.com/"
    }
    maven { // ModMaven, there is a bunch of stuff on there
        name 'ModMaven'
        url "https://modmaven.k-4u.nl/"
    }
    repositories {//Curseforge maven, in case some other maven goes offline
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }
    maven { // Redstone Flux
        name 'CoFH Maven'
        url "https://maven.covers1624.net/"
    }

    maven { // Albedo Lights
        url 'https://repo.elytradev.com/'
    }*/

    flatDir {
        dirs 'libs1'
    }

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    /*
    compileOnly "team.chisel.ctm:CTM:MC1.12.2-0.3.2.18"
    compileOnly "mezz.jei:jei_1.12.2:4.15.+"
    compileOnly "cofh:RedstoneFlux:1.12-2.+:deobf"
    compileOnly "slimeknights.mantle:Mantle:1.12-1.3.+"
    compileOnly "slimeknights:TConstruct:1.12.2-2.12.+"
    compileOnly "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.+"//1.1x-1.4.4-55
    compileOnly "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.8.468"
    compileOnly "de.ellpeck.actuallyadditions:ActuallyAdditions:1.12.2+"*/

    compileOnly fg.deobf("abc:albedo:0.1.3")
    implementation fg.deobf('abc:Baubles:1.12_1.5.2')
    implementation fg.deobf('abc:crafttweaker2:4.1.20.660')
    implementation fg.deobf('abc:Hwyla:1.8.26-B41_1.12.2')
    compileOnly fg.deobf('abc:industrialcraft2:2.8.170_ex112')
    implementation fg.deobf('abc:jei:1.12.2_4.16.1.301')
    compileOnly fg.deobf('abc:OpenComputers:1.7.2.67')
    compileOnly fg.deobf('abc:TerraFirmaCraft:1.7.19.177')
    compileOnly fg.deobf('abc:Mantle:1.12-1.3.3.55')
    compileOnly fg.deobf('abc:TConstruct:1.12.2-2.13.0.183')

    //deobfCompile "abc:AdvancedTFCTech:0.2.3"
    //deobfCompile "abc:immersivepetroleum:1.1.10"
}

task coreJar(type: Jar) {
    // Copy all compiled files and resources from the source set to the JAR
    // If you have additional source sets, add the same logic here
    from(sourceSets.main.output) {
        // Don't include the coremod in the main mod
        // If you have more coremod-related packages that aren't nested in the main one, add exclusions for them
        include 'blusunrize/immersiveengineering/common/asm/**'
    }
    manifest {
        attributes "FMLCorePlugin": "blusunrize.immersiveengineering.common.asm.IELoadingPlugin"
        attributes 'Maven-Artifact': archiveGroup + ':' + archivesBaseName + '-core:' + version
    }
    // Add a classifier to the JAR ('-core' at the end of the file name)
    // Distinguishes the mod JAR from the shipped one
    classifier 'core'
    group = 'build'
}

//build.dependsOn signMainJar
jar.dependsOn coreJar
def libPrefix = 'META-INF/libraries'
jar {
    manifest {
        attributes 'ContainedDeps': libPrefix + '/' + coreJar.archivePath.name
        attributes "FMLAT": "ImmersiveEngineering_at.cfg"
        attributes 'Maven-Artifact': archiveGroup + ':' + archivesBaseName + ':' + version
    }
    exclude 'blusunrize/immersiveengineering/common/asm/**'
    // Add the output of the mod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
        into libPrefix
    }
    
    destinationDir = file("$rootDir/production")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    from(".") {
        include "mcmod.info"
        expand "version": project.version
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': 'ImmersiveEngineering_at.cfg'
        attributes 'Maven-Artifact': group + ':' + archivesBaseName + ':' + version
    }
}

task apiZip(type: Zip) {
    from(sourceSets.main.java) {
        include "blusunrize/immersiveengineering/api/**"
    }
    classifier = 'api'
}
task apiJar(type: Jar) {
    from(sourceSets.main.java) {
        include "blusunrize/immersiveengineering/api/**"
    }
    classifier = 'api'
}

artifacts {
    archives deobfJar
    archives apiZip
    archives apiJar
}

String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if (buildNumber.equals("")) {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? "." + System.getenv("bamboo_buildNumber") : ""
    }
    if (!buildNumber.equals("")) {
        buildNumber = "-" + buildNumber
    }
    return buildNumber
}

//Code for automatic update JSON generation
class GenerateUpdateJSON extends DefaultTask {
    static def initVersions = { mcFromIEVersion ->
        mcFromIEVersion.put("0.8", "1.8.9")
        mcFromIEVersion.put("0.9", "1.9.4")
        mcFromIEVersion.put("0.10", "1.10.2")
        mcFromIEVersion.put("0.11", "1.11.2")
        mcFromIEVersion.put("0.12", "1.12.2")
    }
    static def VERSION_PREFIX = "##### Version "
    static def CURRENT_MC_VERSION = "1.12.2"
    static def CHANGELOG_FOR_MANUAL = "src/main/resources/assets/immersiveengineering/changelog.json"
    static def BUILT_SUFFIX = " - BUILT"
    static def RECOMMENDED = "-recommended"
    static def LATEST = "-latest"
    static def CF_URL = "https://minecraft.curseforge.com/projects/immersive-engineering"

    static int compareVersions(String vA, String vB) {
        String[] vPartsA = vA.split("[\\D]")
        String[] vPartsB = vB.split("[\\D]")
        if (vPartsA.length == 0 && vPartsB.length == 0)
            return vA <=> vB
        else if (vPartsA.length == 0)
            return -1
        else if (vPartsB.length == 0)
            return 1

        int length = Math.min(vPartsA.length, vPartsB.length)
        for (int i = 0; i < length; i++) {
            int pA = Integer.parseInt(vPartsA[i])
            int pB = Integer.parseInt(vPartsB[i])
            if (pA != pB) {
                return pA <=> pB
            }
        }
        if (vPartsA.length != vPartsB.length)
            return vPartsA.length <=> vPartsB.length
        return vA <=> vB
    }

    @TaskAction
    def generate() {
        Map<String, String> mcFromIEVersion = new HashMap<>()
        initVersions(mcFromIEVersion)
        File changelog = new File("changelog.md")
        if (!changelog.exists())
            println "Changelog does not exist! Aborting!"
        else {
            Map<String, Map<String, String>> changelogForVersions = new HashMap<>()
            Map<String, String> promos = new TreeMap<>({ String s1, String s2 ->
                compareVersions(s1, s2)
            })
            String currentVersion = null
            String currentChangelog = ""
            changelog.eachLine('ISO-8859-1', { line ->
                if (line.startsWith(VERSION_PREFIX)) {
                    if (currentVersion != null) {
                        String mainVer = currentVersion.substring(0, currentVersion.indexOf('-'))
                        String mcVer = mcFromIEVersion[mainVer]
                        if (!changelogForVersions.containsKey(mcVer)) {
                            promos.put(mcVer + RECOMMENDED, currentVersion)
                            promos.put(mcVer + LATEST, currentVersion)
                            changelogForVersions[mcVer] = new TreeMap<>({ String s1, String s2 ->
                                compareVersions(s1, s2)
                            })
                        }
                        changelogForVersions[mcVer][currentVersion] = currentChangelog
                    }
                    if (line.endsWith(BUILT_SUFFIX)) {
                        currentVersion = line.substring(VERSION_PREFIX.length(), line.length() - BUILT_SUFFIX.length())
                    } else {
                        currentVersion = (String) null
                    }
                    currentChangelog = ""
                } else if (!line.isEmpty()) {
                    if (currentChangelog.length() == 0)
                        currentChangelog += line
                    else
                        currentChangelog += "\n" + line
                }
                return null
            })
            Map<String, Object> mainMap = new TreeMap<>({ String s1, String s2 ->
                compareVersions(s1, s2)
            })
            mainMap.putAll(changelogForVersions)
            mainMap["homepage"] = CF_URL
            mainMap["promos"] = promos
            //JSON for the Forge update checker
            def updateJson = JsonOutput.toJson(mainMap)
            updateJson = JsonOutput.prettyPrint(updateJson)
            File outF = new File("changelog.json")
            outF.delete()
            outF << updateJson
            //JSON for the manual
            def manualJson = JsonOutput.toJson(changelogForVersions[CURRENT_MC_VERSION])
            manualJson = JsonOutput.prettyPrint(manualJson)
            outF = new File(CHANGELOG_FOR_MANUAL)
            outF.delete()
            outF << manualJson
        }
    }
}

task updateJson(type: GenerateUpdateJSON)

processResources.dependsOn updateJson
